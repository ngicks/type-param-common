package main

import (
	"flag"
	"io"
	"os"
	"strings"
	"text/template"

	methodgenhelper "github.com/ngicks/type-param-common/cmd/method-gen-helper"
	"github.com/ngicks/type-param-common/iterator"
)

const autoGenerationNotice = "// Code generated by github.com/ngicks/type-param-common/cmd/reverser. DO NOT EDIT."

var (
	inputDir = flag.String("i", ".", "input dir.")
	targetTy = flag.String("ty", "DeIterator,SeIterator", "target type. comma-separated")
	ignore   = flag.String("ignore", "", "ignored filename list. comma-seperated")
	outFile  = flag.String("o", "", "out filename. stdout if empty.")
)

func main() {
	if err := _main(); err != nil {
		panic(err)
	}
}

func _main() error {
	flag.Parse()

	typeInfos, packageName, err := methodgenhelper.ParseDir(
		*inputDir,
		strings.Split(*targetTy, ","),
		strings.Split(*ignore, ","),
	)
	if err != nil {
		return err
	}

	var out io.Writer
	if *outFile == "" {
		out = os.Stdout
	} else {
		out, err = os.Create(*outFile)
		if err != nil {
			return err
		}
	}

	return methodgenhelper.ExecuteTemplate(
		out,
		reverserTemplate,
		packageName,
		autoGenerationNotice,
		methodgenhelper.ToAnySlice(typeInfoToTemplateParam(typeInfos)),
	)
}

type TemplateParam struct {
	methodgenhelper.TypeInfo

	ReceiverName string
	OtherMembers []string
}

func typeInfoToTemplateParam(typInfo []methodgenhelper.TypeInfo) []TemplateParam {
	ret := []TemplateParam{}
	for _, v := range typInfo {
		otherMember := iterator.
			FromSlice(methodgenhelper.GetMemberNames(v.StructTyp)).
			Exclude(func(s string) bool { return s == v.InnerMemberName }).
			Collect()

		ret = append(ret, TemplateParam{
			TypeInfo:     v,
			OtherMembers: otherMember,
			ReceiverName: "iter",
		})
	}
	return ret
}

var reverserTemplate = template.Must(template.New("v").Funcs(funcMap).Parse(`
func ({{.ReceiverName}} {{.TypeName}}[{{.TypeParams}}]) ReverseRaw() (rev *{{.TypeName}}[{{.TypeParams}}], ok bool) {
	reversedInner, ok := Reverse({{.ReceiverName}}.{{.InnerMemberName}})
	if !ok {
		return nil, ok
	}
	return &{{.TypeName}}[{{.TypeParams}}]{
		{{.InnerMemberName}}: reversedInner,
{{- range $index, $member := .OtherMembers}}
		{{$member}}: {{$.ReceiverName}}.{{$member}},
{{- end}} 
	}, true
}

func ({{.ReceiverName}} {{.TypeName}}[{{.TypeParams}}]) Reverse() (rev SeIterator[{{lastTypeParam .TypeParams}}], ok bool) {
	return {{.ReceiverName}}.ReverseRaw()
}
`))

var funcMap = template.FuncMap{
	"lastTypeParam": lastElementOfCommaSep,
}

func lastElementOfCommaSep(str string) string {
	return strings.Trim(lastElement(str, ","), " ")
}

func lastElement(str string, sep string) string {
	sp := strings.Split(str, sep)
	return sp[len(sp)-1]
}
