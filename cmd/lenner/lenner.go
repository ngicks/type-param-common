package main

import (
	"flag"
	"io"
	"os"
	"strings"
	"text/template"

	methodgenhelper "github.com/ngicks/type-param-common/cmd/method-gen-helper"
)

const autoGenerationNotice = "// Code generated by github.com/ngicks/type-param-common/cmd/lenner. DO NOT EDIT."

var (
	inputDir = flag.String("i", ".", "input dir.")
	targetTy = flag.String("ty", "DeIterator", "target type.")
	ignore   = flag.String("ignore", "lenner.go", "ignored filename list. comma-seperated")
	outFile  = flag.String("o", "", "out filename. stdout if empty.")
)

func main() {
	if err := _main(); err != nil {
		panic(err)
	}
}

func _main() error {
	flag.Parse()

	typeInfos, packageName, err := methodgenhelper.ParseDir(*inputDir, *targetTy, strings.Split(*ignore, ","))
	if err != nil {
		return err
	}

	var out io.Writer
	if *outFile == "" {
		out = os.Stdout
	} else {
		out, err = os.Create(*outFile)
		if err != nil {
			return err
		}
	}

	return methodgenhelper.ExecuteTemplate(
		out,
		lennerTemplate,
		autoGenerationNotice,
		packageName,
		typeInfos,
	)
}

var lennerTemplate = template.Must(template.New("v").Parse(`
func ({{.ReceiverName}} {{.TypeName}}[{{.TypeParams}}]) Len() int {
	if lenner, ok := {{.ReceiverName}}.{{.InnerMemberName}}.({{.LennerInterfaceName}}); ok {
		return lenner.Len()
	}
	return -1
}
`))
