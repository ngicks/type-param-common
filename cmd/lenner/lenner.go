package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const autoGenerationNotice = "// Code generated by github.com/ngicks/type-param-common/cmd/lenner. DO NOT EDIT."

var (
	inputDir = flag.String("i", ".", "input dir.")
	targetTy = flag.String("ty", "DeIterator", "target type.")
	ignore   = flag.String("ignore", "lenner.go", "ignored filename list. comma-seperated")
)

func main() {
	if err := _main(); err != nil {
		panic(err)
	}
}

func _main() (err error) {
	flag.Parse()

	content, err := readDir(*inputDir)
	if err != nil {
		return
	}

	fset := token.NewFileSet()

	var packageName string

	templateParams := make([]TemplateParam, 0)

	for _, filename := range content {
		var file *os.File
		file, err = os.Open(filename)
		if err != nil {
			return
		}
		var tmplParam []TemplateParam
		packageName, tmplParam, err = getTemplateParam(fset, filename, file)
		if err != nil {
			return
		}
		templateParams = append(templateParams, tmplParam...)
	}

	fmt.Println(autoGenerationNotice)
	fmt.Printf("package %s\n", packageName)
	buf := bytes.NewBufferString("")
	for _, v := range templateParams {
		buf.Reset()
		lennerTemplate.Execute(buf, v)
		fmt.Println(string(buf.Bytes()))
	}

	return
}

func readDir(dir string) (content []string, err error) {
	dirents, err := os.ReadDir(dir)
	if err != nil {
		return
	}

	for _, v := range dirents {
		if !v.Type().IsRegular() {
			continue
		}
		content = append(content, filepath.Join(dir, v.Name()))
	}
	return
}

func getTemplateParam(fset *token.FileSet, filename string, r io.Reader) (packageName string, templateParams []TemplateParam, err error) {
	if filepath.Base(filename) == *ignore {
		return
	}
	f, err := parser.ParseFile(fset, filepath.Base(filename), r, 0)
	if err != nil {
		panic(err)
	}

	if packageName == "" {
		packageName = f.Name.Name
	}

	ast.Inspect(f, func(n ast.Node) (goAhead bool) {
		goAhead = true

		var ok bool
		typeSpec, ok := n.(*ast.TypeSpec)
		if !ok {
			return
		}
		structTy, ok := typeSpec.Type.(*ast.StructType)
		if !ok {
			return
		}
		if structTy.Fields.List == nil {
			return
		}

		for _, field := range structTy.Fields.List {
			idx, ok := field.Type.(*ast.IndexExpr)
			if !ok {
				continue
			}
			ident, ok := idx.X.(*ast.Ident)
			if !ok {
				continue
			}

			if ident.Name == *targetTy {
				var memberName string
				if len(field.Names) > 0 {
					memberName = field.Names[0].Name
				} else {
					memberName = *targetTy
				}

				t := TemplateParam{
					ReceiverName:        "iter",
					TypeName:            typeSpec.Name.Name,
					TypeParams:          getTypeParam(typeSpec),
					InnerMemberName:     memberName,
					LennerInterfaceName: "Lenner",
				}
				templateParams = append(templateParams, t)
			}
		}
		return
	})
	return
}

func getTypeParam(typeSpec *ast.TypeSpec) string {
	if typeSpec.TypeParams != nil && typeSpec.TypeParams.List != nil {
		tmplStr := make([]string, 0)
		for _, v := range typeSpec.TypeParams.List {
			if v.Names != nil {
				for _, n := range v.Names {
					tmplStr = append(tmplStr, n.Name)
				}
			}
		}
		return strings.Join(tmplStr, ",")
	}
	return ""
}

type TemplateParam struct {
	ReceiverName        string
	TypeName            string
	TypeParams          string
	InnerMemberName     string
	LennerInterfaceName string
}

var lennerTemplate = template.Must(template.New("v").Parse(`
func ({{.ReceiverName}} {{.TypeName}}[{{.TypeParams}}]) Len() int {
	if lenner, ok := {{.ReceiverName}}.{{.InnerMemberName}}.({{.LennerInterfaceName}}); ok {
		return lenner.Len()
	}
	return -1
}`))
