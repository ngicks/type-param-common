package iterator

// Code generated by github.com/ngicks/type-param-common/cmd/reverser. DO NOT EDIT.

func (iter Excluder[T]) ReverseRaw() (rev *Excluder[T], ok bool) {
	reversedInner, ok := Reverse(iter.inner)
	if !ok {
		return nil, ok
	}
	return &Excluder[T]{
		inner: reversedInner,
		excluder: iter.excluder, 
	}, true
}

func (iter Excluder[T]) Reverse() (rev SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}

func (iter Selector[T]) ReverseRaw() (rev *Selector[T], ok bool) {
	reversedInner, ok := Reverse(iter.inner)
	if !ok {
		return nil, ok
	}
	return &Selector[T]{
		inner: reversedInner,
		selector: iter.selector, 
	}, true
}

func (iter Selector[T]) Reverse() (rev SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}

func (iter Mapper[T,U]) ReverseRaw() (rev *Mapper[T,U], ok bool) {
	reversedInner, ok := Reverse(iter.inner)
	if !ok {
		return nil, ok
	}
	return &Mapper[T,U]{
		inner: reversedInner,
		mapper: iter.mapper, 
	}, true
}

func (iter Mapper[T,U]) Reverse() (rev SeIterator[U], ok bool) {
	return iter.ReverseRaw()
}

func (iter NSkipper[T]) ReverseRaw() (rev *NSkipper[T], ok bool) {
	reversedInner, ok := Reverse(iter.inner)
	if !ok {
		return nil, ok
	}
	return &NSkipper[T]{
		inner: reversedInner,
		n: iter.n, 
	}, true
}

func (iter NSkipper[T]) Reverse() (rev SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}

func (iter WhileSkipper[T]) ReverseRaw() (rev *WhileSkipper[T], ok bool) {
	reversedInner, ok := Reverse(iter.inner)
	if !ok {
		return nil, ok
	}
	return &WhileSkipper[T]{
		inner: reversedInner,
		isOutOfWhile: iter.isOutOfWhile,
		skipIf: iter.skipIf, 
	}, true
}

func (iter WhileSkipper[T]) Reverse() (rev SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}

func (iter NTaker[T]) ReverseRaw() (rev *NTaker[T], ok bool) {
	reversedInner, ok := Reverse(iter.inner)
	if !ok {
		return nil, ok
	}
	return &NTaker[T]{
		inner: reversedInner,
		n: iter.n, 
	}, true
}

func (iter NTaker[T]) Reverse() (rev SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}

func (iter WhileTaker[T]) ReverseRaw() (rev *WhileTaker[T], ok bool) {
	reversedInner, ok := Reverse(iter.inner)
	if !ok {
		return nil, ok
	}
	return &WhileTaker[T]{
		inner: reversedInner,
		isOutOfWhile: iter.isOutOfWhile,
		takeIf: iter.takeIf, 
	}, true
}

func (iter WhileTaker[T]) Reverse() (rev SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}
