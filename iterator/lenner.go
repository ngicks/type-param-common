package iterator

// Code generated by github.com/ngicks/type-param-common/cmd/lenner. DO NOT EDIT.

func (iter Excluder[T]) Len() int {
	if lenner, ok := iter.inner.(Lenner); ok {
		return lenner.Len()
	}
	return -1
}

func (iter Selector[T]) Len() int {
	if lenner, ok := iter.inner.(Lenner); ok {
		return lenner.Len()
	}
	return -1
}

func (iter Iterator[T]) Len() int {
	if lenner, ok := iter.DeIterator.(Lenner); ok {
		return lenner.Len()
	}
	return -1
}

func (iter Mapper[T,U]) Len() int {
	if lenner, ok := iter.inner.(Lenner); ok {
		return lenner.Len()
	}
	return -1
}

func (iter Reverser[T]) Len() int {
	if lenner, ok := iter.inner.(Lenner); ok {
		return lenner.Len()
	}
	return -1
}

func (iter NSkipper[T]) Len() int {
	if lenner, ok := iter.inner.(Lenner); ok {
		return lenner.Len()
	}
	return -1
}

func (iter WhileSkipper[T]) Len() int {
	if lenner, ok := iter.inner.(Lenner); ok {
		return lenner.Len()
	}
	return -1
}

func (iter NTaker[T]) Len() int {
	if lenner, ok := iter.inner.(Lenner); ok {
		return lenner.Len()
	}
	return -1
}

func (iter WhileTaker[T]) Len() int {
	if lenner, ok := iter.inner.(Lenner); ok {
		return lenner.Len()
	}
	return -1
}
